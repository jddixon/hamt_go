hamt_go/TODO

2014-05-21
    * Table.insertLeaf should NOT return slotNbr                        * DONE
    * investigate mysterious improvement in Root.insertLeaf() perf

2014-05-19
    * table_test must be modified to test NewTableWithLeaf instead
        of NewTable
    * Table.insert/find/deleteLeaf drop maxDepth args                   * DONE
        - add root.maxTableDepth field                                  * DONE

2014-05-15
    * modify NewHAMT() to add add error return, to deal with w > 6      * DONE
        and w = t = 0                                                   * DONE
    * possible optimization: first Leaf to be inserted parameter to     * DONE
        NewTable                                                        * DONE

    THESE CHANGES (perf3* results) worsened performance by about 8%:
    * possible optimization: maxDepth a parameter to insert/find/delete * DONE
        Leaf, gets decremented at each iteration, error if 0            * DONE
    * then Root is responsible for calculating root.MaxDepth (once      * DONE
        and only once)                                                  * DONE


2014-05-12 (04-20, re-edited)
    * convert Table.maxSlots to function MaxSlots()                     * DONE
    * convert Table.maxDepth to function MaxDepth()                     * DONE

2014-05-12 (-05-06, edited)
    * remove ndx from Entry (used only in testing)                      * SKIP
    * drop error return from NewEntry()                                 * SKIP
    * replace Entry with Node everywhere (yields v0.8.0)                * DONE
    * drop entry.go (and so the Entry type)                             * DONE
    * calculate BytesKey.Hashcode() directly                            * DONE

2014-05-09
    * add profileHAMT.go after blog.golang.org/profiling-go-programs    * DONE

2014-05-09 (was 04-23)
    * need performance test which runs as a command, always does same
        number of ops (eg 10^6)
    * need performance test which is say 1% inserts, 99% finds, 
        and so forth
    * same test but with varying degrees of concurrency

2014-05-07
    * correct calculation of table.maxDepth in NewTable()
    * determine whether Table.indices can be dropped                    * DONE
        - dropped: performance improves 10%                             * DONE

2014-05-06 (04-17, edited)
    * possibly allow dynamic resizing of root table
        - this might be restricted to tables of N * W nodes
        - probably both N and W restricted to powers of two
    * need tools for static analysis of frozen HAMTs
    * possibly need serialization/deserialization tools

2014-04-26
    * TestSWAR64 consistently fails on 64-bit Intel CPU laptop
        - TestSWAR32 succeeds wherever tested
        - constant declarations changed to uint32, uint64
    * test on EC2 machines - FAILS
2014-04-24
    * consider merging Table.insertEntry and insertIntoOccupiedSlot
2014-04-21 
    * FIX: insertIntoOccupiedSlot() does not replace the value          * DONE
        where there is an exact match on keys                           * DONE
    * need to add buckets to handle exact matches on 64 bit keys
        (however very unlikely such matches may be in actual use)
2014-04-18
    * Investigate suspicion that while larger root table has a small
        positive effect on performance, larger tables elsewhere cause
        a large increase in memory consumption.
2014-04-16
    * to make this thing more useful:
        - where Table32.Delete() leaves empty table, need to remove
            the table from the data structure - recursively
2014-04-04
    * need perf tests, all 6 variants (32,64 * 3)
    * must clearly identify OS, hardware, Go version
    * eventually need option to use hardware POPCNT if available
    * need docs
        - and figures
        - docs, figures get imported into gh-pages
    * project README should refer to github.io (ie, gh-pages)
