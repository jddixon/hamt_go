hamt_go/TODO

2014-04-18
    * hamt64_perf_test.go                                               * DONE
        - 10^6 run with 32-byte keys about 2700ns/op, 450 MB RAM
        - idMap about 2050 ns/op, 1 GB RAM (uses 256 slot tables)
    * need to benchmark HAMT64 with 1024 slot root table
    * need buckets at max depth to do hamt32_perf_test (million-entry 
        trie too deep for HAMT32)

2014-04-17
    * consider allowing larger root table of 2^(t + W) entries
    * then possibly allow dynamic resizing
        - this might be restricted to tables of 2^(N * W) entries
    * need tools for static analysis of frozen HAMTs
    * possibly need serialization/deserialization tools

    * start 'dev' branch, do new work there, with only urgent           * DONE
        bugfixes on the master branch.

2014-04-16
    * clean up, save, step version number                               * DONE
    * to make this thing more useful:
        - add buckets at the bottom level (in a 32K run, with random
            keys, there were 6 entries at level 6, 150 at level5)
        - where Table32.Delete() leaves empty table, need to remove 
            the table from the data structure - recursively
    * documentation needs to mention POPCNT/SWAR                        * DONE

2014-04-05
    * implement HAMT32 and tests first, then HAMT64 and tests           * DONE

2014-04-04
    * need perf tests, all 6 variants (32,64 * 3)
        * must clearly identify OS, hardware, Go version
    * eventually need option to use hardware POPCNT if available
    * need docs
        - and figures
        - docs, figures get imported into gh-pages
    * project README should refer to github.io (ie, gh-pages)
